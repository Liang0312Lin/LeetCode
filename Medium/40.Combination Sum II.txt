// 找出符合目標的所有組合
// 使用遞迴呼叫所有可能的組合

class Solution {
private:
    void method(vector<int>& candidates, int target, int index, vector<int>& result, vector<vector<int>>& ans){
        if(target == 0){
            ans.push_back(result);
            return;
        }
        if(target < 0)
            return;

        for(int i = index; i < candidates.size(); i++){
            if(i > index && candidates[i] == candidates[i - 1])
                continue;
            if(candidates[i] > target)
                break;
            result.push_back(candidates[i]);
            method(candidates, target - candidates[i], i + 1, result, ans);
            result.pop_back();
        }
    }

public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<int> result;
        vector<vector<int>> ans;
        method(candidates, target, 0, result, ans);
        return ans;
    }
};